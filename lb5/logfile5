(base) katya@katya:~/os/lb5$ cat task1.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

// переменная для изначального обработчика
struct sigaction old_hand;

// 2ой обработчик сигнала
void handler2(int sig){
    printf("SIGRTMIN во 2ом обработчике\n");

    // восстановление старого обработчика
    sigaction(SIGRTMIN, &old_hand, NULL);
    sleep(10);
    printf("2ой обработчик завершился после 10 сек\n");
}

// 1ый обработчик сигнала
void handler1(int sig){
    printf("SIGRTMIN во 1ом обработчике\n");

    // надежная обработка сигналов
    struct sigaction sa;
    sa.sa_handler = handler2;
    sigemptyset(&sa.sa_mask);
    sigaddset(&sa.sa_mask, SIGINT);

    // установка втрого обработчика
    sigaction(SIGRTMIN, &sa, &old_hand);
    sleep(10);
    printf("1ый обработчик завершился после 10 сек\n");
}

int main(){
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = handler1;
    // пустая маска
    sigemptyset(&act.sa_mask);

    // добавление маски в сигнал, блокирующийся во время обработки других
    sigaddset(&act.sa_mask, SIGINT);

    // установка первого обработчика для SIGRTMIN
    sigaction(SIGRTMIN, &act, NULL);

    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
(base) katya@katya:~/os/lb5$ gcc task1.c -o task1

(base) katya@katya:~/os/lb5$ ./task1 &
[1] 4260
(base) katya@katya:~/os/lb5$ kill -SIGRTMIN %1
SIGRTMIN во 1ом обработчике
(base) katya@katya:~/os/lb5$ jobs -l
[1]+  4260 Запущен          ./task1 &
(base) katya@katya:~/os/lb5$ 1ый обработчик завершился после 10 сек
SIGRTMIN во 2ом обработчике
(base) katya@katya:~/os/lb5$ kill -SIGRTMIN %1
(base) katya@katya:~/os/lb5$ 2ой обработчик завершился после 10 сек
SIGRTMIN во 1ом обработчике

(base) katya@katya:~/os/lb5$ 1ый обработчик завершился после 10 сек

(base) katya@katya:~/os/lb5$ kill -SIGRTMIN %1
SIGRTMIN во 2ом обработчике
(base) katya@katya:~/os/lb5$ kill -SIGINT %1
(base) katya@katya:~/os/lb5$ jobs -l
[1]+  4260 Запущен          ./task1 &
(base) katya@katya:~/os/lb5$ 2ой обработчик завершился после 10 сек

[1]+  Прерывание    ./task1



(base) katya@katya:~/os/lb5$ cat task2.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

void (*mysig(int sig, void (*hnd)(int)))(int) {
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = hnd;
    sigemptyset(&act.sa_mask);
    sigaddset(&act.sa_mask, SIGRTMIN);
    sigaddset(&act.sa_mask, SIGRTMAX);
    sigaddset(&act.sa_mask, SIGINT);
    act.sa_flags = 0;
    sigaction(sig, &act, 0);
    return act.sa_handler;
}


// обработчик сигнала
void handler1(int sig){
    printf("SIGUSR1 обработчик\n");
    sleep(30);
    printf("SIGUSR1 обработчик завершился после 30 сек\n");
}

// обработчик сигнала
void handler2(int sig){
    printf("SIGRTMIN обработчик\n");
    sleep(30);
    printf("SIGRTMIN обработчик завершился после 30 сек\n");
}

// обработчик сигнала
void handler3(int sig){
    printf("SIGRTMAX обработчик\n");
    sleep(30);
    printf("SIGRTMAX обработчик завершился после 30 сек\n");
}


int main(){
    mysig(SIGUSR1, handler1);
    mysig(SIGRTMIN, handler2);
    mysig(SIGRTMAX, handler3);
    
    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
(base) katya@katya:~/os/lb5$ gcc task2.c -o task2


(base) katya@katya:~/os/lb5$ ./task2 &
[1] 13944
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик

(base) katya@katya:~/os/lb5$ kill -SIGRTMIN %1
(base) katya@katya:~/os/lb5$ kill -SIGRTMAX %1
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик завершился после 30 сек
SIGRTMIN обработчик

(base) katya@katya:~/os/lb5$ kill -SIGINT %1
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 13944 Запущен          ./task2 &
(base) katya@katya:~/os/lb5$ SIGRTMIN обработчик завершился после 30 сек

[1]+  Прерывание    ./task2
(base) katya@katya:~/os/lb5$ ./task2 &
[1] 14956
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик

(base) katya@katya:~/os/lb5$ kill -SIGRTMIN %1
(base) katya@katya:~/os/lb5$ kill -SIGRTMAX %1
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик завершился после 30 сек
SIGRTMIN обработчик

(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 14956 Запущен          ./task2 &
(base) katya@katya:~/os/lb5$ SIGRTMIN обработчик завершился после 30 сек
SIGRTMAX обработчик

(base) katya@katya:~/os/lb5$ kill -SIGINT %1
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 14956 Запущен          ./task2 &
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 14956 Запущен          ./task2 &
(base) katya@katya:~/os/lb5$ SIGRTMAX обработчик завершился после 30 сек

[1]+  Прерывание    ./task2


(base) katya@katya:~/os/lb5$ cat task3.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

void (*mysig(int sig, void (*hnd)(int)))(int) {
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = hnd;
    sigemptyset(&act.sa_mask);
    
    sigaddset(&act.sa_mask, SIGINT);
    act.sa_flags = 0;
    sigaction(sig, &act, NULL);
    return act.sa_handler;
}


// обработчик сигнала
void handler1(int sig){
    printf("SIGUSR1 обработчик\n");
    sleep(30);
    printf("SIGUSR1 обработчик завершился после 30 сек\n");
}


int main(){
    //надежный обработчик
    mysig(SIGUSR1, handler1);
    
    //ненадежный
    //signal(SIGUSR1, handler1);

    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
(base) katya@katya:~/os/lb5$ gcc task3.c -o task3
(base) katya@katya:~/os/lb5$ ./task3 &
[1] 15380
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
SIGUSR1 обработчик
(base) katya@katya:~/os/lb5$ kill -SIGINT %1
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 15380 Запущен          ./task3 &
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик завершился после 30 сек

[1]+  Прерывание    ./task3



(base) katya@katya:~/os/lb5$ cat task3.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

void (*mysig(int sig, void (*hnd)(int)))(int) {
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = hnd;
    sigemptyset(&act.sa_mask);
    
    sigaddset(&act.sa_mask, SIGINT);
    act.sa_flags = 0;
    sigaction(sig, &act, NULL);
    return act.sa_handler;
}


// обработчик сигнала
void handler1(int sig){
    printf("SIGUSR1 обработчик\n");
    sleep(30);
    printf("SIGUSR1 обработчик завершился после 30 сек\n");
}


int main(){
    //надежный обработчик
    //mysig(SIGUSR1, handler1);
    
    //ненадежный
    signal(SIGUSR1, handler1);

    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
(base) katya@katya:~/os/lb5$ gcc task3.c -o task3
(base) katya@katya:~/os/lb5$ ./task3 &
[1] 15624
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
SIGUSR1 обработчик
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 15624 Запущен          ./task3 &
(base) katya@katya:~/os/lb5$ kill -SIGINT %1
(base) katya@katya:~/os/lb5$ jobs -l
[1]+ 15624 Прерывание    ./task3



(base) katya@katya:~/os/lb5$ cat task4.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

void (*mysig(int sig, void (*hnd)(int)))(int) {
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = hnd;
    sigemptyset(&act.sa_mask);
    
    //добавление в маску сигнала, который должен быть отложен
    if(sig == SIGUSR1)
        sigaddset(&act.sa_mask, SIGFPE);
    
    act.sa_flags = 0;
    sigaction(sig, &act, NULL);
    return act.sa_handler;
}


// обработчик сигнала
void handler1(int sig){
    printf("SIGUSR1 обработчик\n");
    // отпрвка другого сигнала
    kill(getpid(), SIGFPE);
    // отправка такого же сигнала
    kill(getpid(), SIGUSR1);
    sleep(20);
    printf("SIGUSR1 обработчик завершился после 20 сек\n");
}

// обработчик сигнала
void handler2(int sig){
    printf("SIGFPE обработчик\n");
    sleep(20);
    printf("SIGFPE обработчик завершился после 20 сек\n");
}


int main(){
    //надежный обработчик
    mysig(SIGUSR1, handler1);
    mysig(SIGFPE, handler2);

    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
(base) katya@katya:~/os/lb5$ gcc task4.c -o task4
(base) katya@katya:~/os/lb5$ ./task4 &
[1] 7825
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
SIGUSR1 обработчик
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик завершился после 20 сек
SIGUSR1 обработчик
SIGUSR1 обработчик завершился после 20 сек
SIGUSR1 обработчик

(base) katya@katya:~/os/lb5$ kill %1



(base) katya@katya:~/os/lb5$ cat task4.c
#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

void (*mysig(int sig, void (*hnd)(int)))(int) {
    // надежная обработка сигналов
    struct sigaction act;
    act.sa_handler = hnd;
    sigemptyset(&act.sa_mask);
    
    //добавление в маску сигнала, который должен быть отложен
    if(sig == SIGUSR1)
        sigaddset(&act.sa_mask, SIGFPE);
    
    act.sa_flags = 0;
    sigaction(sig, &act, NULL);
    return act.sa_handler;
}


// обработчик сигнала
void handler1(int sig){
    printf("SIGUSR1 обработчик\n");
    // отпрвка другого сигнала
    kill(getpid(), SIGFPE);
    // отправка такого же сигнала
    //kill(getpid(), SIGUSR1);
    sleep(20);
    printf("SIGUSR1 обработчик завершился после 20 сек\n");
}

// обработчик сигнала
void handler2(int sig){
    printf("SIGFPE обработчик\n");
    sleep(20);
    printf("SIGFPE обработчик завершился после 20 сек\n");
}


int main(){
    //надежный обработчик
    mysig(SIGUSR1, handler1);
    mysig(SIGFPE, handler2);

    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}
[1]+  Завершено      ./task4
(base) katya@katya:~/os/lb5$ gcc task4.c -o task4
(base) katya@katya:~/os/lb5$ ./task4 &
[1] 20746
(base) katya@katya:~/os/lb5$ kill -SIGUSR1 %1
(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик

(base) katya@katya:~/os/lb5$ SIGUSR1 обработчик завершился после 20 сек
SIGFPE обработчик

(base) katya@katya:~/os/lb5$ SIGFPE обработчик завершился после 20 сек

(base) katya@katya:~/os/lb5$ kill %1


#include <stdio.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>


// обработчик сигнала
void handler1(int sig, siginfo_t *info, void *context){
    if (sig == SIGRTMIN){
        printf("SIGRTMIN: %d\n", info->si_value.sival_int);

        //вложенная отправка
        if(info->si_value.sival_int == 0){
            union sigval val;
            val.sival_int = 3;
            sigqueue(getpid(), SIGRTMIN, val);            
        }
        sleep(1);
    }
    else if(sig == SIGRTMIN+1){
        printf("SIGRTMIN+1: %d\n", info->si_value.sival_int);
        sleep(1);
    }
    else if(sig == SIGRTMIN+2){
        printf("SIGRTMIN+2: %d\n", info->si_value.sival_int);
        sleep(1);
    }
    else if(sig == SIGUSR1){
        printf("SIGUSR1: %d\n", info->si_value.sival_int);
        sleep(1);
    }
    else if(sig == SIGUSR2){
        printf("SIGUSR2: %d\n", info->si_value.sival_int);
        sleep(1);
    }
}

// обработчик сигнала
void handler2(int sig, siginfo_t *info, void *context){
    union sigval val;
    for(int i = 0; i<3; ++i){
        val.sival_int = i;
        sigqueue(getpid(), SIGRTMIN, val);
    }
    for(int i = 0; i<3; ++i){
        val.sival_int = i;
        sigqueue(getpid(), SIGRTMIN+1, val);
    }
    for(int i = 0; i<3; ++i){
        val.sival_int = i;
        sigqueue(getpid(), SIGRTMIN+2, val);
    }
    for(int i = 0; i<3; ++i){
        val.sival_int = i;
        sigqueue(getpid(), SIGUSR1, val);
    }
    for(int i = 0; i<3; ++i){
        val.sival_int = i;
        sigqueue(getpid(), SIGUSR2, val);
    }
    sleep(2);
}

int main(){
    // сигналы обрабатываются как сигналы реального времени
    struct sigaction sa;
    sa.sa_sigaction = handler1;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_SIGINFO;
    sigaddset(&sa.sa_mask, SIGRTMIN);
    sigaddset(&sa.sa_mask, SIGRTMIN+1);
    sigaddset(&sa.sa_mask, SIGRTMIN+2);
    sigaddset(&sa.sa_mask, SIGUSR1);
    sigaddset(&sa.sa_mask, SIGUSR2);
    
    sigaction(SIGRTMIN, &sa, NULL);
    sigaction(SIGRTMIN+1, &sa, NULL);
    sigaction(SIGRTMIN+2, &sa, NULL);
    sigaction(SIGUSR1, &sa, NULL);
    sigaction(SIGUSR2, &sa, NULL);

    //сигнал, который создаст очередь
    struct sigaction act;
    act.sa_sigaction = handler2;
    sigemptyset(&act.sa_mask);

    sigaddset(&act.sa_mask, SIGRTMIN);
    sigaddset(&act.sa_mask, SIGRTMIN+1);
    sigaddset(&act.sa_mask, SIGRTMIN+2);
    sigaddset(&act.sa_mask, SIGUSR1);
    sigaddset(&act.sa_mask, SIGUSR2);

    act.sa_flags = SA_SIGINFO;
    
    sigaction(SIGFPE, &act, NULL);
    union sigval val;
    sigqueue(getpid(), SIGFPE, val);
    
    // ждем поступления сигналов
    for(;;) pause();

    return 0;
}

(base) katya@katya:~/os/lb5$ gcc task5.c -o task5
(base) katya@katya:~/os/lb5$ ./task5
SIGUSR1: 0
SIGUSR2: 0
SIGRTMIN: 0
SIGRTMIN: 1
SIGRTMIN: 2
SIGRTMIN: 3
SIGRTMIN+1: 0
SIGRTMIN+1: 1
SIGRTMIN+1: 2
SIGRTMIN+2: 0
SIGRTMIN+2: 1
SIGRTMIN+2: 2

